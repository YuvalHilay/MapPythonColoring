import random

# Define the graph as a dictionary
graph = {'A': ['B', 'C', 'D', 'F'],
         'B': ['A', 'C'],
         'C': ['B', 'D', 'F', 'A'],
         'D': ['A', 'C', 'F'],
         'F': ['A', 'C', 'D']}

# Define the colors
colors = ['red', 'green', 'blue', 'yellow']

# Define the utility function
def utility(assignment):
    utility_val = 0
    for node, color in assignment.items():
        for neighbor in graph[node]:
            if neighbor in assignment and assignment[neighbor] == color:
                utility_val -= 1
    return utility_val

# Define a function to check if a color can be assigned to a node
def is_color_valid(node, color, assignment):
    for neighbor in graph[node]:
        if neighbor in assignment and assignment[neighbor] == color:
            return False
    return True

# Define the expectimax function
def expectimax(node, assignment, colors, prob):
    # Check if all nodes have been assigned a color
    if len(assignment) == len(graph):
        return assignment, prob
    
    # Select the next uncolored node
    uncolored_nodes = [node for node in graph if node not in assignment]
    node = uncolored_nodes[0]
    
    # If the node is a leaf node, return the expected utility and probability
    if len(uncolored_nodes) == 1:
        eu = 0
        count = 0
        for color in colors:
            if is_color_valid(node, color, assignment):
                new_assignment = assignment.copy()
                new_assignment[node] = color
                eu += prob * utility(new_assignment)
                count += 1
        return assignment, eu / count
    
    # If the node is not a leaf node, do expectimax search
    if node in assignment:
        # The node has already been assigned a color, do a max search
        max_utility = float('-inf')
        max_node = None
        for neighbor in graph[node]:
            if neighbor not in assignment:
                for color in colors:
                    if is_color_valid(neighbor, color, assignment):
                        new_assignment = assignment.copy()
                        new_assignment[neighbor] = color
                        _, utility_val = expectimax(neighbor, new_assignment, colors, prob)
                        if utility_val > max_utility:
                            max_utility = utility_val
                            max_node = neighbor
        return max_node, max_utility
    else:
        # The node has not been assigned a color, do an expectation search
        eu = 0
        count = 0
        if len(colors) == 0:
            return assignment, 0
        for color in colors:
            if is_color_valid(node, color, assignment):
                new_assignment = assignment.copy()
                new_assignment[node] = color
                _, utility_val = expectimax(node, new_assignment, colors, prob / len(colors))
                eu += utility_val
                count += 1
        if count == 0:
            return assignment, 0
        else:
            return assignment, eu / count


# Define the backtracking function
def color_map(n_colors):
    # Call the expectimax function with an empty assignment and equal probability for all colors
    result, _ = expectimax(None, {}, colors[:n_colors], 1)
    print("\nResult:")
    if result is not None:
        print("Map coloring with", n_colors, "colors:")
        for node, color in result.items():
            print(node, ": ", color)
    else:
        print("Map could not be colored with", n_colors, "colors.")
    return result



# Define the utility function
def utility(assignment):
    utility_val = 0
    for node, color in assignment.items():
        for neighbor in graph[node]:
            if neighbor in assignment and assignment[neighbor] == color:
                utility_val -= 1
    return utility_val


# Get user input for number of colors
n_colors = int(input("Enter the number of colors: "))

# Call the backtracking function
result = color_map(n_colors)

print("\nResult:")
if result is not None:
    print("Map coloring with", n_colors, "colors:")
    for node, color in result.items():
        print(node, ": ", color)
else:
    print("Map could not be colored with", n_colors, "colors.")
