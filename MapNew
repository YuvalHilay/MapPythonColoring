#The function MappingColorsWithexpectimax takes in the current state, depth, player, memoization dictionary, vertices,
#neighbor dictionary and number of colors. It returns the best score for the player at that state
#considering the possible moves of both the player and chance nodes.#
def MappingColorsWithexpectimax(state, depth, player, memo, vertices, neighbors, num_colors):
    # If depth limit reached, return heuristic value of state
    if depth == 0:
        return heuristic(state)
# Convert the state dictionary into a tuple and check if it is in the memo dictionary    
    state_key = tuple(sorted(state.items()))
    if state_key in memo:
        return memo[state_key]
# If it's the player's turn, look for the best move
    if player == "MAX":
        best_score = float('-inf')
        for vertex in vertices:
            if state[vertex] == 0:
                for color in range(1, num_colors+1):
                    if is_valid(state, vertex, color, neighbors):
                        new_state = state.copy()
                        new_state[vertex] = color
                        score = MappingColorsWithexpectimax(new_state, depth-1, "EXP", memo, vertices, neighbors, num_colors)
                        best_score = max(best_score, score)
        # Store the best score in the memo dictionary and return it
        memo[state_key] = best_score
        return best_score
    # If it's the chance node's turn, calculate the expected score
    else:
        score_sum = 0
        count = 0
        for vertex in vertices:
            if state[vertex] == 0:
                for color in range(1, num_colors+1):
                    if is_valid(state, vertex, color, neighbors):
                        new_state = state.copy()
                        new_state[vertex] = color
                        score = MappingColorsWithexpectimax(new_state, depth-1, "MAX", memo, vertices, neighbors, num_colors)
                        score_sum += score
                        count += 1
        if count == 0:
            score = heuristic(state)
        else:
            score = score_sum/count
         # Store the expected score in the memo dictionary and return it
        memo[state_key] = score
        return score
    
#The function is_valid checks if a vertex can be colored with the given color without violating
#the color constraint of its neighbors. It returns True if valid, False otherwise.
def is_valid(state, vertex, color, neighbors):
    for neighbor in neighbors[vertex]:
        if neighbor in state and state[neighbor] == color:
            return False
    return True
#The function heuristic calculates the number of unique colors used in the current state.
#It returns the count as the heuristic value.
def heuristic(state):
    return len(set(state.values()))
#Take input from the user for the number of colors
num_colors = int(input("Enter the number of colors: "))
#Define the vertices and neighbors of the graph
vertices = ['A', 'B', 'C', 'D', 'F']
neighbors = {'A': ['B', 'C', 'D', 'F'],
             'B': ['A', 'C'], 
             'C': ['B', 'D', 'F', 'A'], 
             'D': ['A', 'C', 'F'], 
             'F': ['A', 'C', 'D']}
#Define the initial state of the graph where all vertices are uncolored
initial_state = {'A': 0, 'B': 0, 'C': 0, 'D': 0, 'F': 0}
memo = {}
#This loop keeps running until all vertices are assigned a color
while 0 in initial_state.values():
    best_vertex = None
    best_score = float('-inf')
    # Loop through each vertex to find the one with the highest degree
    for vertex in vertices:
        if initial_state[vertex] == 0:
            score = len(neighbors[vertex])
            if score > best_score:
                best_score = score
                best_vertex = vertex
    # If there is a vertex to assign a color to
    if best_vertex is not None:
        #Initialize the best color and its score
        best_color = None
        best_score = float('-inf')
        #Loop through each color to find the one with the highest score
        for color in range(1, num_colors+1):
            if is_valid(initial_state, best_vertex, color, neighbors):
                new_state = initial_state.copy()
                new_state[best_vertex] = color
                score = MappingColorsWithexpectimax(new_state, 3, "MAX", memo, vertices, neighbors, num_colors)
                if score > best_score:
                    best_score = score
                    best_color = color
        initial_state[best_vertex] = best_color
    else:
        print("No solution found")
        break

#If all vertices are assigned a color and there are no None values in the initial state
if 0 not in initial_state.values() and None not in initial_state.values():
     print("Final state:", initial_state)
else:
    print("No solution found")
